// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
}

model Template {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  content     String
  category    String    @default("general")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @default(now()) @updatedAt @map("updated_at")
  parameters  Parameter[]
  schedules   Schedule[]

  @@map("templates")
}

model Parameter {
  id          String    @map("id")
  name        String
  type        String    @default("text")
  placeholder String?
  required    Boolean   @default(false)
  isDynamic   Boolean   @default(false)   // <-- this is what you're looking for
  source      String?  // Optional field
  template    Template  @relation(fields: [templateId], references: [id], onDelete: Cascade)
  templateId  Int       @map("template_id")
  
  @@id([templateId, id])
  @@map("template_parameters")
}

model Schedule {
  id            Int       @id @default(autoincrement())
  name          String
  templateId    Int       @map("template_id")
  template      Template  @relation(fields: [templateId], references: [id])
  scheduleType  String    @map("schedule_type") // once, recurring, event
  cronExpression String?   @map("cron_expression")
  scheduledDate DateTime? @map("scheduled_date")
  status        String    @default("active")
  sessionName   String    @map("session_name")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @default(now()) @updatedAt @map("updated_at")
  lastRun       DateTime? @map("last_run")
  nextRun       DateTime? @map("next_run")
  parameters    ScheduleParameter[]
  recipients    ScheduleRecipient[]
  history       ScheduleHistory[]

  @@map("scheduled_messages")
}

model ScheduleParameter {
  scheduleId  Int      @map("scheduled_message_id")
  paramId     String   @map("param_id")
  paramValue  String?  @map("param_value")
  schedule    Schedule @relation(fields: [scheduleId], references: [id], onDelete: Cascade)

  @@id([scheduleId, paramId])
  @@map("scheduled_message_params")
}

model ScheduleRecipient {
  scheduleId Int      @map("scheduled_message_id")
  recipient  String
  schedule   Schedule @relation(fields: [scheduleId], references: [id], onDelete: Cascade)

  @@id([scheduleId, recipient])
  @@map("scheduled_message_recipients")
}

model ScheduleHistory {
  id           Int       @id @default(autoincrement())
  scheduleId   Int       @map("scheduled_message_id")
  schedule     Schedule  @relation(fields: [scheduleId], references: [id], onDelete: Cascade)
  runAt        DateTime  @default(now()) @map("run_at")
  successCount Int       @default(0) @map("success_count")
  failedCount  Int       @default(0) @map("failed_count")
  details      Json?     // Stores detailed results of the send operation

  @@map("scheduled_message_history")
}