// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
}

model Template {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  content     String
  category    String    @default("general")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @default(now()) @updatedAt @map("updated_at")
  parameters  Parameter[]
  schedules   Schedule[]
  abVariants  ABVariant[]

  @@map("templates")
}

model Parameter {
  id          String    @map("id")
  name        String
  type        String    @default("text")
  placeholder String?
  required    Boolean   @default(false)
  isDynamic   Boolean   @default(false)   // <-- this is what you're looking for
  source      String?  // Optional field
  template    Template  @relation(fields: [templateId], references: [id], onDelete: Cascade)
  templateId  Int       @map("template_id")
  
  @@id([templateId, id])
  @@map("template_parameters")
}

model Schedule {
  id            Int       @id @default(autoincrement())
  name          String
  templateId    Int       @map("template_id")
  template      Template  @relation(fields: [templateId], references: [id])
  scheduleType  String    @map("schedule_type") // once, recurring, event
  cronExpression String?   @map("cron_expression")
  scheduledDate DateTime? @map("scheduled_date")
  status        String    @default("active")
  sessionName   String    @map("session_name")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @default(now()) @updatedAt @map("updated_at")
  lastRun       DateTime? @map("last_run")
  nextRun       DateTime? @map("next_run")
  parameters    ScheduleParameter[]
  recipients    ScheduleRecipient[]
  history       ScheduleHistory[]

  @@map("scheduled_messages")
}

model ScheduleParameter {
  scheduleId  Int      @map("scheduled_message_id")
  paramId     String   @map("param_id")
  paramValue  String?  @map("param_value")
  schedule    Schedule @relation(fields: [scheduleId], references: [id], onDelete: Cascade)

  @@id([scheduleId, paramId])
  @@map("scheduled_message_params")
}

model ScheduleRecipient {
  scheduleId Int      @map("scheduled_message_id")
  recipient  String
  schedule   Schedule @relation(fields: [scheduleId], references: [id], onDelete: Cascade)

  @@id([scheduleId, recipient])
  @@map("scheduled_message_recipients")
}

model ScheduleHistory {
  id           Int       @id @default(autoincrement())
  scheduleId   Int       @map("scheduled_message_id")
  schedule     Schedule  @relation(fields: [scheduleId], references: [id], onDelete: Cascade)
  runAt        DateTime  @default(now()) @map("run_at")
  successCount Int       @default(0) @map("success_count")
  failedCount  Int       @default(0) @map("failed_count")
  details      Json?     // Stores detailed results of the send operation

  @@map("scheduled_message_history")
}

// A/B Testing Models
model ABExperiment {
  id                 Int       @id @default(autoincrement())
  name               String
  description        String?
  status             String    @default("draft") // draft, active, paused, completed, cancelled
  createdAt          DateTime  @default(now()) @map("created_at")
  updatedAt          DateTime  @default(now()) @updatedAt @map("updated_at")
  startedAt          DateTime? @map("started_at")
  endedAt            DateTime? @map("ended_at")
  sessionName        String    @map("session_name")
  totalRecipients    Int       @default(0) @map("total_recipients")
  cooldownMinutes    Int       @default(5) @map("cooldown_minutes")
  batchSize          Int       @default(50) @map("batch_size")
  createdBy          String?   @map("created_by")
  settings           Json?     // Additional experiment settings
  
  // Relations
  variants           ABVariant[]
  recipients         ABRecipient[]
  batches            ABBatch[]
  results            ABResult[]
  analytics          ABAnalytics[]

  @@map("ab_experiments")
}

model ABVariant {
  id                   Int       @id @default(autoincrement())
  experimentId         Int       @map("experiment_id")
  name                 String    // 'A', 'B', 'C', etc.
  templateId           Int?      @map("template_id")
  customMessage        String?   @map("custom_message")
  createdAt            DateTime  @default(now()) @map("created_at")
  updatedAt            DateTime  @default(now()) @updatedAt @map("updated_at")
  
  // Relations
  experiment           ABExperiment @relation(fields: [experimentId], references: [id], onDelete: Cascade)
  template             Template?    @relation(fields: [templateId], references: [id])
  recipients           ABRecipient[]
  batches              ABBatch[]
  results              ABResult[]
  analytics            ABAnalytics[]

  @@map("ab_variants")
}

model ABRecipient {
  id           Int       @id @default(autoincrement())
  experimentId Int       @map("experiment_id")
  variantId    Int       @map("variant_id")
  phoneNumber  String    @map("phone_number")
  name         String?   // Name from CSV upload
  assignedAt   DateTime  @default(now()) @map("assigned_at")
  status       String    @default("assigned") // assigned, sent, failed, excluded
  
  // Relations
  experiment   ABExperiment @relation(fields: [experimentId], references: [id], onDelete: Cascade)
  variant      ABVariant    @relation(fields: [variantId], references: [id], onDelete: Cascade)
  results      ABResult[]

  @@unique([experimentId, phoneNumber])
  @@map("ab_recipients")
}

model ABBatch {
  id                  Int       @id @default(autoincrement())
  experimentId        Int       @map("experiment_id")
  variantId           Int       @map("variant_id")
  batchNumber         Int       @map("batch_number")
  sentAt              DateTime  @default(now()) @map("sent_at")
  recipientCount      Int       @default(0) @map("recipient_count")
  successCount        Int       @default(0) @map("success_count")
  failedCount         Int       @default(0) @map("failed_count")
  nextBatchAllowedAt  DateTime? @map("next_batch_allowed_at")
  status              String    @default("pending") // pending, sending, completed, failed
  
  // Relations
  experiment          ABExperiment @relation(fields: [experimentId], references: [id], onDelete: Cascade)
  variant             ABVariant    @relation(fields: [variantId], references: [id], onDelete: Cascade)
  results             ABResult[]

  @@map("ab_batches")
}

model ABResult {
  id                Int        @id @default(autoincrement())
  experimentId      Int        @map("experiment_id")
  variantId         Int        @map("variant_id")
  recipientId       Int        @map("recipient_id")
  batchId           Int?       @map("batch_id")
  sentAt            DateTime?  @map("sent_at")
  status            String?    // sent, failed, pending
  errorMessage      String?    @map("error_message")
  whatsappMessageId String?    @map("whatsapp_message_id")
  deliveryStatus    String?    @map("delivery_status") // delivered, read, failed
  responseData      Json?      @map("response_data")
  
  // Relations
  experiment        ABExperiment @relation(fields: [experimentId], references: [id], onDelete: Cascade)
  variant           ABVariant    @relation(fields: [variantId], references: [id], onDelete: Cascade)
  recipient         ABRecipient  @relation(fields: [recipientId], references: [id], onDelete: Cascade)
  batch             ABBatch?     @relation(fields: [batchId], references: [id])

  @@map("ab_results")
}

model ABAnalytics {
  id             Int       @id @default(autoincrement())
  experimentId   Int       @map("experiment_id")
  variantId      Int       @map("variant_id")
  date           DateTime  @db.Date
  totalSent      Int       @default(0) @map("total_sent")
  totalDelivered Int       @default(0) @map("total_delivered")
  totalRead      Int       @default(0) @map("total_read")
  totalFailed    Int       @default(0) @map("total_failed")
  updatedAt      DateTime  @default(now()) @updatedAt @map("updated_at")
  
  // Relations
  experiment     ABExperiment @relation(fields: [experimentId], references: [id], onDelete: Cascade)
  variant        ABVariant    @relation(fields: [variantId], references: [id], onDelete: Cascade)

  @@unique([experimentId, variantId, date])
  @@map("ab_analytics")
}

model ABRateLimit {
  id               Int       @id @default(autoincrement())
  sessionName      String    @unique @map("session_name")
  lastSendAt       DateTime  @default(now()) @map("last_send_at")
  messagesSentHour Int       @default(0) @map("messages_sent_hour")
  messagesSentDay  Int       @default(0) @map("messages_sent_day")
  cooldownUntil    DateTime? @map("cooldown_until")
  updatedAt        DateTime  @default(now()) @updatedAt @map("updated_at")

  @@map("ab_rate_limits")
}

model activity_logs {
  id         Int      @id @default(autoincrement())
  action     String
  details    String?
  created_at DateTime @default(now())
}